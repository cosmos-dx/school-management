#!/usr/bin/env python
# -*- coding: UTF-8 -*-
#
# generated by wxGlade 0.6.8 on Fri Sep 25 19:54:43 2015
#

import os
from rmsvalidators import *
from class_query import USERLOGIN

def UserQuerry():
    row = USERLOGIN().LOG()
    return row
    

class User_Login(Frame):
    def __init__(self, parent, sptag, spnum, buttonidx, gpar, whxy, **kw):
    
        Frame.__init__(self, parent)
        self.rscr = kw['rscr']
        self.ftsz = int(self.rscr['sysfontnum'])
        self.spnum = spnum
        self.sptag = sptag
        self.gpar = gpar
        self.whxy = whxy
        self.buttonidx = buttonidx
        self.fyear = self.rscr['fyear']
        self.today = self.rscr['today']
        self.daterange = self.rscr['daterange']
        self.leftpadd = 20 ### padding for left side of Frame
        self.kdk = -1
        try:
            self.master.iconbitmap(self.rscr['rmsicon'])
        except Exception as err:
            StatusDP(self.status, 'Error Found [%s]'%str(err), 'red')
        self.initUI()
        
    def initUI(self):
        self.master.title(self.sptag.title())
        wminwidth = 12
        wmaxcolumn = 15
        wmaxrows = 20
        wrow = 1
        self.tcount = 0
        lfnt_fg_bg = {'font': ['Calibri', self.ftsz, 'normal'], 'bg': 'SystemButtonFace', 'fg': 'black'}
        lfntfg_bgg = {'font': ['Calibri', sum([self.ftsz,2]), 'normal'],'bg': 'SystemButtonFace', 'fg':'blue'}
        lb_fg_bg = {'font': ['Courier', self.ftsz, 'bold'], 'bg': '#b0e0e6', 'fg': 'black'} 
        
        botm_fg_bg = {'font':[lfnt_fg_bg['font'][0], sum([int(lfnt_fg_bg['font'][1]),1]), 'bold'],
                      'bg':lfnt_fg_bg['bg'], 'fg':lfnt_fg_bg['fg']}
        btwd = 12
        tot_fg_bg = {'font':[lfnt_fg_bg['font'][0], sum([int(lfnt_fg_bg['font'][1]),11]), 'bold'],
                      'bg':lfnt_fg_bg['bg'], 'fg':lfnt_fg_bg['fg']}
        efnt_fgbg = {'font': ['Courier', self.ftsz, 'bold'], 'bg':'#b0e0e6', 'fg': 'black'}
        efnt_fg_bg = {'font':['Courier',self.ftsz,'bold'],'bg':'#b0e0e6','fg':'black','bd':2}
        bfnt_fg_bg = {'font':['Times New Roman Bold',self.ftsz,'bold'],'bg':'OliveDrab1','fg':'black'} ###self.rscr['font']['button']
        bfnt_fg_bg2 = {'font':['Times New Roman Bold',self.ftsz,'bold'],'fg':'black'} ###self.rscr['font']['button']
        combx_fnt = {'font': ['Courier', self.ftsz, 'bold'],}
        chk_fg_bg = {'font': ['Calibri', self.ftsz, 'normal'], 'bg': 'SystemButtonFace', 'fg': 'black','relief':'raised'}
        if self.whxy:
            self.master.geometry('%dx%d+%d+%d' % self.whxy)
        else:
            self.master.geometry('%dx%d+%d+%d' % (wsw, wsh, xpos, ypos))

        self.top = RMS_LABEL(self.master, text=self.sptag.upper(), **lfnt_fg_bg)
        self.top.grid(row=wrow, column=1, rowspan=1, columnspan=15, sticky='nwes')
        wrow += 1
        

        self.save = RMS_BUTTON(self.master, text='Save', bd=3,
                    command=self.OnSave, **bfnt_fg_bg)
        self.save.grid(row=wrow, column=2, rowspan=1, columnspan=1, sticky='w')
        
        self.close = RMS_BUTTON(self.master, text='Close', bd=3,
                                command=self.OnClose, **bfnt_fg_bg)       
        self.close.grid(row=wrow, column=4, rowspan=1, columnspan=1, sticky='w')
        wrow += 1

        self.imgboyrun = RMS_BTNGIF(self, self.master, gif='img11.gif',
                    dirname='bitmaps', framecount=6,)
        #self.imgboyrun.grid(row=wrow, column=1, rowspan=6, columnspan=6, padx=1, pady=1)
        self.imgboyrun.GridShow(geo={'r':0, 'c':4, 'cp':4, 'rp':4})
            
        for r in range(wrow):
            self.master.rowconfigure(r, weight=1)
        for r in range(11):
            self.master.columnconfigure(r, weight=1)
        
        self.check = False

    def INFO(self):
        RMSMBX(self, text="\n Wrong InPut !! \n  Try Again !! \n", info=True, textclr='red', bg='yellow')

    def txt1_key(self, event=None):
        if event.keysym in ['Return', 'Tab']:
            idcheck = self.txt1.GetValue().strip()
            oldid = UserQuerry()[0].strip()
            if oldid == idcheck :
                self.txt2.Enable()
                self.txt1.fg('blue')
                self.RefreshEntryBG(self.txt1, self.txt2)                
            else:
                self.INFO()
                self.txt2.Disable()
                self.RefreshEntryBG(self.txt1, self.txt1)
                
    def txt2_key(self, event=None):
        if event.keysym in ['Return', 'Tab']:
            passcheck = self.txt2.GetValue().strip()
            oldpass = UserQuerry()[1].strip()
            if oldpass == passcheck :
                self.new_txt1.Enable()
                self.txt3.Enable()
                self.txt4.Enable()
                self.RefreshEntryBG(self.txt2, self.new_txt1)
                self.txt2.fg('blue')
            else:
                self.INFO()
                self.new_txt1.Disable()
                self.RefreshEntryBG(self.txt2, self.txt2)
                          
    def new_txt1_key(self, event=None):
        self.NextFocus(event, self.new_txt1, self.txt3)
        
    def txt3_key(self, event=None):
        self.NextFocus(event, self.txt3, self.txt4)
        
    def txt4_key(self, event=None):
        if event.keysym in ['Return', 'Tab']:
            if self.txt3.GetValue().strip() == self.txt4.GetValue().strip():
                self.save.Enable()
                self.NextFocus(event, self.txt4, self.save)
            else:
                RMSMBX(self, text="\n NEW PASSWORD NOT MATCHED !! \n  Try Again !! \n", info=True, textclr='red', bg='yellow')
                self.txt4.SetValue('')
                self.NextFocus(event, self.txt4, self.txt4)
                  
    def save_key(self, event=None):
        if event.keysym in ['Return', 'Tab']:
            self.OnSave(event)

    def OnSave(self,event):
        logid = self.txt1.GetValue()
        newlogid = self.new_txt1.GetValue()
        oldpass = self.txt2.GetValue()
        newpass = self.txt3.GetValue()
        confpass = self.txt4.GetValue()
        
        row = UserQuerry()
        
        uid,upass = row[0].strip(),row[1].strip()
        if oldpass != str(upass):
            RMSMBX(self, text="\n Wrong Password !! \n  Try Again !! \n", info=True, textclr='red', bg='white')
            self.RefreshEntryBG(self.save, self.txt2)
        else:
            args = newlogid, newpass 
            USERLOGIN().LogUpdate(args)
            RMSMBX(self, text="\n Record Updated !! \n  Good !! \n", info=True, textclr='blue', bg='yellow')
            self.save.Disable()
            self.RefreshEntryBG(self.save, self.close)
            
    def NextFocus(self, event, currwdg, nxtwdg):
        text = currwdg.GetValue()
        if event.keysym in ['Return', 'Tab']:
            if text.strip() == '':
                return
            self.RefreshEntryBG(currwdg, nxtwdg)

    def ResetAllEntry(self, resetcolor = 'white'):
        for k, v in self.widdict.items():
            try:
                k['bg'] = resetcolor
            except:
                pass
            
    def RefreshEntryBG(self, curentry, nextentry, resetcolor='white', mycolor='yellow', f=True):
        self.lastactiveentry = curentry
        if f:
            try:
                self.lastactiveentry['bg'] = resetcolor
            except:
                pass
            try:
                nextentry['bg'] = mycolor
            except:
                pass
            nextentry.focus_set()
        else:
            self.ResetAllEntry(resetcolor=resetcolor)
            curentry['bg'] = mycolor
            
    def OnClose(self, event=None):
        self.click = True
        mess = RMSMBX(self.master, text="\nWANT to EXIT ??\n", info=False, pos=(500,350),
                          size=(220, 130),textclr='white', bg='black')
        if mess.result:
            self.master.destroy()
            try:
                self.gpar.btnlst[self.buttonidx]['state']='normal'
                self.gpar.btnlst[self.buttonidx]['relief']='raised'
            except Exception as err:
                pass
        else:
            self.master.focus()
            if event:
                event.widget.focus()
               
def main():
    root = Tk()
    sw = root.winfo_screenwidth()
    sh = root.winfo_screenheight()
    #"Calibri Bold", "Calibri", "Arial", "Arial Bold", "Times New Roman", "Times New Roman Bold"
    sysfontnum = 12  ### Default is given Upate Later/User Given 
    entryfont = "Calibri Bold"
    subentryfont = "Calibri"
    fontd = {"calb":"Calibri Bold", "cal":"Calibri", "arl":"Arial", "arlb":"Arial Bold",
                 "tnr":"Times New Roman", "tnrb":"Times New Roman Bold", "entryfont":{'font': (entryfont, sysfontnum)},
                 "subentryfont":{'font': (subentryfont, sysfontnum)}}
    today = time.strftime('%d/%m/%Y', time.localtime(time.time()))
    today_db_f = time.strftime('%Y-%m-%d', time.localtime(time.time()))
    
    mycalendar = (('fy0', today_db_f, today_db_f, u''),)
    rmspath = os.path.dirname(os.path.realpath(__file__))
    pdir = os.path.dirname(rmspath)
    
    rmsicon = os.path.join(rmspath, 'my_icon.ico')
    ostd = {'pageline':60, 'net_colm':'Y','party_bal':'N','stockist_list':'Y',
                'page_size':'4','default_trade':0,'bill_series':'S'}
    own = {'name':'RMS SOFT','add1':'http://www.rmssoft.co.in','add2':'','phone':'','reg':'', 'gstin':'','statu1':'','statu2':'','statu3':'','statu4':''}
    otlst = {'others':'/True', 'stockist_det':''}
    opdfsett = {'vat':4, 'vat1':4, 'sat':1, 'cst':2}
    ownerdict = {'billseries':'S', 'demochk':45, 'ownerinfo':{'owner':own, 'othersett':ostd, 'otlst':otlst, 'opdfsett':opdfsett},
                 'errorlist':[]}
    prpath = {}
    printerinfo = {'printer':{'pport':'USB001','pname':'myprinter'},'shareprinter':{'sprinter':'myprinter','sport':'LPT1','sname':'tvs'}}
    taxinfo = {'taxinfo':{'tax1name':'CGST', 'tax2name':'SGST','tax1lst':[], 'tax2lst':[], 'taxpayer':True},}
    
    rscr = {'sw':sw, 'sh':sh, 'font':fontd,'sysfontnum':int(sysfontnum), 'ownerdict':ownerdict, 'mycalendar':mycalendar,
            'fyear':'0', 'daterange':['2000-01-01','2021-03-31'],
            'daterange':{'fy':'fy6','dbfrm':'2021-04-01','frm':'01/04/2021','tod':'31/03/2022','partnum':'','dbtod':'2022-03-31'},
            'ledgerid':'0','itemid':'0','transid':'0','spid':'0','csid':'0','csname':'',
            'rmspath':rmspath,'rmsicon':rmsicon, 'pardir': rmspath, 'prpath':prpath,'taxinfo':taxinfo,'printerinfo': printerinfo,
            'TABLENUM':'','today':today, 'today_db_format':today_db_f,'tax1':'0', 'tax2':'0',
            'the_time':'', 'itemidlist':[], 'spidlist':[],'renderlist':[],
            'taxinvoice':True,'stkmess':'YES','decimalval':'2','last_esti_no':None, 'last_sale_bill_no':None,
            'exp_alert':90,'estifilter':False, }
    buttonidx = 1
    parent = None
    sptag = 'RESET USER LOGIN'
    spnum = 2
    whxy = (600, 300, 300, 100)
    app = User_Login(root, sptag, spnum, buttonidx, parent, whxy, rscr=rscr)    
    root.mainloop()

if __name__ == '__main__':
    main()

