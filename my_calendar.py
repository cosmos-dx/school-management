#!/usr/bin/python
# -*- coding: UTF-8 -*-
#
# generated by wxGlade 0.6.8 on Sun Jun 28 08:11:13 2015
#

from class_query import GETCAL
from config import Configuration
import time
from rmsvalidators import *

def Getting_CalenderValue_ALL():
    row = GETCAL().GetDates_ALL('ASC')
    return row

def Getting_CalenderValue():
    row = GETCAL().GetDates('DESC')
    return row
def Getting_Next_Date():
    row = Getting_CalenderValue()
    nxt_val = int(row[0])+1
    nxdsp = str(row[1]).split('-') 
    nextdate = str(int(str(nxdsp[0])))+'-'+str(Configuration().SESSION())+'-'+str('01')
    nextdate = datetime.strptime(str(nextdate), "%Y-%m-%d").strftime("%Y-%m-%d")
    enddate = str(int(str(nxdsp[0]))+1)+'-'+str(int(Configuration().SESSION())-1)+'-'+str('30')
    enddate = datetime.strptime(str(enddate), "%Y-%m-%d").strftime("%Y-%m-%d")
    return nextdate, enddate
'''
def Getting_Next_Date_ALL():
    row = Getting_CalenderValue_ALL()
    for r in row:
        nxt_val = int(r[0])+1
        nxdsp = str(r[1]).split('-')
        #nextdate = str(int(str(nxdsp[0]))+1)+'-'+str(nxdsp[1])+'-'+str(nxdsp[2])
        nextdate = str(int(str(nxdsp[0])))+'-'+str(Configuration().SESSION())+'-'+str('01')
        nextdate = datetime.strptime(str(nextdate), "%Y-%m-%d").strftime("%Y-%m-%d")
        enddate = str(int(str(nxdsp[0]))+1)+'-'+str(int(Configuration().SESSION())-1)+'-'+str('30')
        enddate = datetime.strptime(str(enddate), "%Y-%m-%d").strftime("%Y-%m-%d")
        return nextdate, enddate
'''
def LcRefresh(self, LC, button1 , button2):
    LC.DeleteAllItems()
    index = 0
    try :
        newval = '1'
        nulls = ''
        self.part, self.fprt = 'fy1', '1'     
        button1.Enable()
        button2.Enable()
    except :
        newval = '1'
        self.fprt = newval
        qur = [(u'fy1', u'1')]
        #self.add.Disable()
        #self.delete.Disable()
        button1.Disable()
        button2.Disable()
    #cnn.close()
    #cursor.close()
    self.part_name = 'fy'
    index = 0
    clst = []
    drow = {}
    try:
        row = Getting_CalenderValue_ALL()
        for r in row:
            nxt_val = int(r[0])
            nxdsp = str(r[1]).split('-')
            #nextdate = str(int(str(nxdsp[0]))+1)+'-'+str(nxdsp[1])+'-'+str(nxdsp[2])
            nextdate = str(int(str(nxdsp[0])))+'-'+str(Configuration().SESSION())+'-'+str('01')
            nextdate = datetime.strptime(str(nextdate), "%Y-%m-%d").strftime("%Y-%m-%d")
            enddate = str(int(str(nxdsp[0]))+1)+'-'+str(int(Configuration().SESSION())-1)+'-'+str('30')
            enddate = datetime.strptime(str(enddate), "%Y-%m-%d").strftime("%Y-%m-%d")
            clst.append(['fy'+str(r[0]), nextdate, enddate, str(nxt_val)])
        xrows = clst
        xrows.reverse()
        for i, v in enumerate(xrows):
            drow[i]={'idx':i,'fyn':v[0], 'frm':v[1], 'tod':v[2], 'fnum':v[3],}
        
    except KeyboardInterrupt:
        #print Configuration().SESSION()
        endtime =  str(time.localtime()[0])+'-'+str(int(Configuration().SESSION())-1)+'-'+str('30')
        starttime =  str((time.localtime()[0])-1)+'-'+str(int(Configuration().SESSION()))+'-'+str('01')
        endtime = datetime.strptime(str(endtime), "%Y-%m-%d").strftime("%Y-%m-%d")
        starttime = datetime.strptime(str(starttime), "%Y-%m-%d").strftime("%Y-%m-%d")
        
        drow[0]={'idx':0,'fyn':'fy1', 'frm':str(starttime),
                 'tod':endtime, 'fnum':'1',}
    self.lc.itemlc_dict = drow
    self.lc.DisplayLBData()
    for nvl in newval:
        nxv = str(nvl).replace("'", "")
        #self.nxt_prt_date.SetValue(str(nxv))
    return nxv

def LcSelectEvent(self, LC):
    pc = LC['fyn'] # PARTITION NAME
    fc = LC['frm'] # DATE from
    c = LC['tod']  # DATE to
    partnum = LC['fnum']  # Here Get New Tabels Incremented Value
    ### HERE New Tabels Incremented Value Set and Then Get ###
    self.rscr['calendar']['partnum']=partnum 
    
    ### HERE New Tabels Incremented Value Set and Then Get ###
    return pc, fc, c, partnum

def DBCreate_AddNewTables_Thread(self, rscr, nval, strval, nxt_part, part_name,
                                 trans_nxt_part, ):
    row = Getting_CalenderValue()
    ###print row[0],row[1]
    try:
        nxt_val = sum([int(row[0]), 1])
        starttime,endtime = Getting_Next_Date()
        nextdate = endtime
    except:
        nxt_val = sum([int(self.fprt),1])
        nextdate = time.strftime('%Y-%m-%d', time.localtime(time.time()))
    nxt_part_name = ''.join([str(self.part_name),str(nxt_val)])
    nxt_part_val = nxt_val
    args = nxt_part_val, nextdate
    GETCAL().DateInsert(args)
    
    button1 , button2 = self.add,self.delete
    LcRefresh(self, self.lc, self.add, self.delete)

def FYThread(self, rscr, get_date, name, ):
    try:
        GETCAL().DateDelete(name.split('y')[1])
        self.deletemess = True
    except :
        pass
    LcRefresh(self, self.lc, self.add, self.delete)
        
class FYCalendar(Frame):
    def __init__(self, parent, sptag, spnum, buttonidx, gpar, whxy, **kw):
    #def __init__(self, sp='pur', rscr={}):
        
        Frame.__init__(self, parent)
        self.rscr = kw['rscr']
        self.ftsz = int(self.rscr['sysfontnum'])
        self.spnum = spnum
        self.sptag = sptag.title()
        self.gpar = gpar
        self.whxy = whxy
        self.buttonidx = buttonidx
        self.fyear = self.rscr['fyear']
        self.daterange = self.rscr['calendar']
        self.leftpadd = 20 ### padding for left side of Frame
        self.kdk = -1
        self.initUI()
        
    def initUI(self):
        self.master.title(self.sptag.title())
        wminwidth = 12
        wmaxcolumn = 15
        wmaxrows = 20
        wrow = 1
        self.tcount = 0
        self.deletemess = None
        self.tabdelbool = None
        self.tabnumval = ''
        self.messdp = ''
        scrwidth = self.rscr['sw']
        lfnt_fg_bg = {'font': ['Calibri', self.ftsz, 'normal'], 'bg': 'SystemButtonFace', 'fg': 'black'} ###self.rscr['font']['label']
        lb_fg_bg = {'font': ['Courier', self.ftsz, 'bold'], 'bg': '#b0e0e6', 'fg': 'black'} ###self.rscr['font']['listbox']
        
        botm_fg_bg = {'font':[lfnt_fg_bg['font'][0], sum([int(lfnt_fg_bg['font'][1]),1]), 'bold'],
                      'bg':lfnt_fg_bg['bg'], 'fg':lfnt_fg_bg['fg']}
        btwd = 12
        tot_fg_bg = {'font':[lfnt_fg_bg['font'][0], sum([int(lfnt_fg_bg['font'][1]),11]), 'bold'],
                      'bg':lfnt_fg_bg['bg'], 'fg':lfnt_fg_bg['fg']}           
        efnt_fg_bg = lb_fg_bg ###self.rscr['font']['entry']
        bfnt_fg_bg = {'font':['Times New Roman Bold',self.ftsz,'bold'],'bg':'OliveDrab1','fg':'black'} ###self.rscr['font']['button']
        bfnt_fg_bg2 = {'font':['Times New Roman Bold',self.ftsz,'bold'],'fg':'black'} ###self.rscr['font']['button']

        if self.whxy:
            self.master.geometry('%dx%d+%d+%d' % self.whxy)
        else:
            self.master.geometry('%dx%d+%d+%d' % (1000, 600, 100, 50))
        
        ########## LastYearCB ####################################
        lpadd = RMS_LABEL(self.master, text="", **lfnt_fg_bg)
        lpadd.grid(row=wrow, column=0,  sticky='w')
        wrow += 1
        
        #wrow += 1
        
        self.delete_part_range_lab = RMS_LABEL(self.master, text="SELECTED FINENCIAL YEAR DATE RANGE", **lfnt_fg_bg)
        self.delete_part_range_lab.grid(row=wrow, column=1, columnspan=4, sticky='w')
        self.delete_part_range = RMS_LABEL(self.master, text="", **lfnt_fg_bg)
        self.delete_part_range.grid(row=wrow, column=4, columnspan=4,  sticky='w')
        self.delete_part_name = RMS_LABEL(self.master, text="", **lfnt_fg_bg)
        self.delete_part_name.grid(row=wrow, column=8,  sticky='w')
        
        wrow += 1 ### row 1 
        gbd, gbg, gfg = 2, '#b0e0e6', 'black'
        lbfont = ['Courier New', self.ftsz-1, 'bold']
        lcolconf = {0:{'idname':'fyn','text':'.','width':1,'bd':gbd,'bg':gbg,'fg':gfg,'font':lbfont,'relief':'raised','wrow':wrow},
                    1:{'idname':'frm','text':'From Date','width':25,'bd':gbd,'bg':gbg,'fg':gfg,'font':lbfont,'relief':'raised','wrow':wrow},
                    2:{'idname':'tod','text':'To Date','width':25,'bd':gbd,'bg':gbg,'fg':gfg,'font':lbfont,'relief':'raised','wrow':wrow},
                    3:{'idname':'fnum','text':'','width':1,'bd':gbd,'bg':gbg,'fg':gfg,'font':lbfont,'relief':'raised','wrow':wrow},}
        self.lc = RMSLBN(self.master, self, True, 15, lcolconf, **lb_fg_bg)
        self.lc.grid(row=wrow, column=1, columnspan=1, rowspan=15, sticky='w')
       
        self.tbcbbv = BooleanVar()
        self.tbcbbv.set(False)
        self.tbcb = RMSChkBut(self.master, text='_',variable=self.tbcbbv, command=self.Ontbcb)
        self.tbcb.grid(row=wrow, column=6, columnspan=1, rowspan=1, sticky='w')
        wrow += 1

        
        self.nxt_prt_date = RMS_LABEL(self.master, text=self.daterange['dbfrm'], **lfnt_fg_bg)
        self.nxt_prt_date.grid(row=wrow, column=6, sticky='w')
        self.nxt_prt_date.SetValue(self.daterange['dbfrm'])
        wrow += 1 ### row 2
        
        self.current_date = RMS_LABEL(self.master, text=self.daterange['dbtod'], **lfnt_fg_bg)
        self.current_date.grid(row=wrow, column=6, sticky='w')
        wrow += 1 ### row 3 
        
        self.addt = RMS_BUTTON(self.master, text='Add New Tables',  command=self.Onaddt, **bfnt_fg_bg)
        self.addt.grid(row=wrow, column=6, columnspan=1, rowspan=1, sticky='w')
        self.addt.Disable()
        wrow += 1
        self.add = RMS_BUTTON(self.master, text='Add Financial Year',  command=self.Onadd, **bfnt_fg_bg)
        self.add.grid(row=wrow, column=6, columnspan=1, rowspan=1, sticky='w')

        wrow += 1
        self.close = RMS_BUTTON(self.master, text='Close', command=self.OnClose, **bfnt_fg_bg2)
        self.close.grid(row=wrow, column=6, columnspan=1, rowspan=1, sticky='w')
        
        wrow += 1
        self.delete = RMS_BUTTON(self.master, text='Delete Financial Year',  command=self.Ondelete, **bfnt_fg_bg)
        self.delete.grid(row=wrow, column=6, columnspan=1, rowspan=1, sticky='w')

        wrow += 1
        self.refresh = RMS_BUTTON(self.master, text='Refresh',  command=self.OnRefresh, **bfnt_fg_bg)
        self.refresh.grid(row=wrow, column=6, columnspan=1, rowspan=1, sticky='w')
        self.part_name, self.fprt = '', ''

        wrow += 7
        self.status = RMS_LABEL(self.master, text='', **lfnt_fg_bg)
        self.status.grid(row=wrow, column=0, rowspan=1, columnspan=15, sticky='w')
        
        self.imggif = RMS_GIF(self, self.master, dirname='bitmaps', **lfnt_fg_bg)

        nxv = LcRefresh(self, self.lc, self.add, self.delete)
        
        self.nxt_prt_date.SetValue(str(nxv))
       
        self.tabnumval = ''
        self.tabdelbool = False
        self.tabdelindex = None
        ##self.IncTabDublicateDelete()

        self.add.bind('Key', self.addkey)
        self.delete.bind('Key', self.delkey)
        self.close.bind('Key', self.closekey)
        
        for r in range(wmaxrows):
            self.master.rowconfigure(r, weight=1)
        for r in range(wmaxcolumn):
            self.master.columnconfigure(r, weight=1)

    def DateRscr(self, widg, dt):
        self.status['fg']='black'
        try:
            ### return batabase date format yyyy-mm-dd 
            return time.strftime('%Y-%m-%d', time.strptime(dt, "%d/%m/%Y"))
        except Exception as err:
            self.status['fg']='red'
            self.status['text']="**Date Error ! dd/mm/yyyy Example: 22/02/2021 ** [%s] "%str(err)
            widg.SetValue(self.rscr['today'])       
            return self.rscr['today']
            
    def Onbil_dt(self, event=None):
        ### Return Event handler
        getdate = self.from_.get()
        dbgetdate = self.DateRscr(self.from_, getdate)
        self.RefreshEntryBG(self.from_, self.to_)
          
    def Oninv_dt(self, event=None):
        getdate = self.to_.get()
        dbgetdate = self.DateRscr(self.to_, getdate)
        self.RefreshEntryBG(self.to_, self.ok)
        
    def Onlastyearcb(self, event):
        LastYearDates(self)
       
    def OnClose(self, event=None):
        mess = RMSMBX(self.master, text="\nWANT to EXIT ??\n", info=False, pos=(500,350),
                          size=(220, 130),textclr='white', bg='black')
        if mess.result:
            self.master.destroy()
            try:
                self.gpar.btnlst[self.buttonidx]['state']='normal'
                self.gpar.btnlst[self.buttonidx]['relief']='raised'
            except:
                pass
        else:
            self.master.focus()
            if event:
                event.widget.focus()
                     
    def RefreshWidgetFocus(self, widg, nxtwidg):
        widg['bg'] = self['bg']
        nxtwidg['bg']='yellow'
        nxtwidg.focus_set()
        
    def Refresh3DButtEffect(self, downbutton):
        ### downbutton pass in strig so eval before reset
        self.close['relief'] = 'raised'
        self.search['relief'] = 'raised'
        self.prnt['relief'] = 'raised'
        self.ok['relief'] = 'raised'
        self.exportxls['relief'] = 'raised'
        self.exportpdf['relief'] = 'raised'
        eval('.'.join(['self', downbutton]))['relief'] = 'sunken'
        self.downbutton = downbutton
        
    def RefreshButtonBG(self, buttonbg):
        ### buttonbg pass in strig so eval before reset
        self.close['bg'] = self['bg']
        self.search['bg'] = self['bg']
        self.prnt['bg'] = self['bg']
        self.ok['bg'] = self['bg']
        self.exportxls['bg'] = self['bg']
        self.exportpdf['bg'] = self['bg']
        eval('.'.join(['self', buttonbg]))['bg'] = 'yellow'
        eval('.'.join(['self', buttonbg])).focus_set()

    def ResetAllEntry(self, resetcolor = 'white'):
        for k, v in self.widdict.items():
            try:
                k['bg'] = resetcolor
            except:
                pass
    def RefreshEntryBG(self, curentry, nextentry, resetcolor='white', mycolor='yellow', f=True):
        self.lastactiveentry = curentry
        if f:
            try:
                self.lastactiveentry['bg'] = resetcolor
                #self.ResetAllEntry(resetcolor=resetcolor)
            except:
                pass
            try:
                nextentry['bg'] = mycolor
            except:
                pass
            
            nextentry.focus_set()
        else:
            self.ResetAllEntry(resetcolor=resetcolor)
            curentry['bg'] = mycolor
            
    def Ontbcb(self, event=None):
        if self.tbcb.GetValue() == True:
            self.addt.Enable()
            self.add.Disable()
        else:
            self.addt.Disable()
            self.add.Enable()

    def GetLCSelectData(self, rd, itemlc_dict, evtname):
        row, col, wdgidf = rd
        self.lcdata = itemlc_dict[row]
        fy = itemlc_dict[row]['fyn']
        frm = itemlc_dict[row]['frm']
        tod = itemlc_dict[row]['tod']
        fnum = itemlc_dict[row]['fnum']
        self.Onlc()
    
    def IncTabDublicateDelete(self):
        oldlst = []
        innumtab = False
        for mx in range(self.lc.GetItemCount()):
            mpc = self.lc.GetItem(mx, 0).GetText() # PARTITION NAME
            mfc = self.lc.GetItem(mx, 1).GetText() # DATE from
            mc = self.lc.GetItem(mx, 2).GetText()  # DATE to
            mtv = self.lc.GetItem(mx, 3).GetText()  # Here Get New Tabels Incremented Value
            if mtv != "":
                innumtab = True
                oldlst.append((mpc, mfc, mc, mtv))
        
        if innumtab:
            #self.lc.DeleteAllItems()
            ####################
            tablename = CREATEPARTITION(self.cnn, self.cursor, self.rscr['dbinfo']['tables']).SELECT_TABLE_NAME(self.dbname)
            salslen = len('sales')
            glst1, glst2 = [], []
            for i in  range(len(tablename)):
                tbngen = tablename[i][0][:salslen]
                v1, v2 = CREATEPARTITION(self.cnn, self.cursor, self.rscr['dbinfo']['tables']
                                         ).SELECT_PARTITION_GENRIC(self.dbname, tbngen)
                glst1.append(v1)
                glst2.append(v2)
            glst1 = glst1[0]
            
            self.Reorder_del_dup()
            
    def Reorder_del_dup(self):
        clst = []
        for i in range(len(self.lc.itemlc_dict)):
            mpc = self.lc.itemlc_dict[i]['fyn']
            mfc = self.lc.itemlc_dict[i]['frm']
            mc = self.lc.itemlc_dict[i]['tod']
            mtv = self.lc.itemlc_dict[i]['fnum']
            clst.append([mpc, mfc, mc, mtv])
        clst.sort()
        for im in range(len(clst)):
            try:
                if clst[im][0].strip() == clst[im+1][0].strip():
                    #print 'dfdf', im
                    clst.pop(im)
            except IndexError:
                pass
        self.lc.DeleteAllItems()
        xrows = list(clst)
        xrows.reverse()
        drow = {}
        for i, v in enumerate(xrows):
            drow[i]={'idx':i,'fyn':v[0], 'frm':v[1], 'tod':v[2], 'fnum':v[3],}
            
        self.lc.itemlc_dict = drow
        self.lc.DisplayLBData()
        
    def addkey(self, event):
        key = event.keysym
        if key in ['Up']:
            self.delete.SetFocus()
        elif key in ['Down']:
            self.close.SetFocus()
        elif key in ['Left', 'Tab']:
            self.lc.SetFocus()
            
    def lckey(self, event):
        key = event.keysym
        if key in ['Right','Left', 'Tab']:
            self.close.SetFocus()
        
    def Onlc(self, ):
        self.delete_part_range.Show()
        self.delete_part_range_lab.Show()
        LC = self.lc
        pc, fc, c, partnum = LcSelectEvent(self, self.lcdata)
        rang = str(fc)+"  To  "+str(c)
        self.delete_part_range.SetValue(str(rang)) # Date Range of Partitons
        self.delete_part_name.SetValue(str(pc)) # PARTITION NAME

        self.tabnumval = partnum
        
        if partnum.strip() != "":
            self.tabdelbool = True
        else:
            self.tabdelbool = False
        self.tabdelindex = self.lcdata['idx']
        
    def closekey(self, event):
        key = event.keysym
        if key in ['Up']:
            self.add.SetFocus()
        elif key in ['Down']:
            self.delete.SetFocus()
        elif key in ['Left', 'Tab']:
            self.lc.SetFocus()
            
    def delkey(self, event):
        key = event.keysym
        if key in ['Up']:
            self.close.SetFocus()
        elif key in ['Down']:
            self.add.SetFocus()
        elif key in ['Left', 'Tab']:
            self.lc.SetFocus()
            
    def GIFPLAY(self, widg):
        #wpos = event.GetEventObject().GetPosition()
        wpos = widg.GetPosition()              
        try:
            self.imggif = self.imggif
            self.imggif.Play()
            self.imggif.SetPosition((wpos[0]-20, wpos[1]))
            self.imggif.Show()
        except AttributeError:
            self.imggif = ''
   
    def Onaddt(self, event=None):
        dlg = RMSMBX(self, 
            text="Do You Want to Create New Tables\n for New Finecial Year ? \n"
                "YES will Add New Tables in DATABASE\n NO will Go Back !!!", info=False)
        if dlg.result:                   
            self.add.Disable()
            self.addt.Disable()
            
            part_name, nxt_part, trans_nxt_part = self.ValueForPart()
            nval = part_name[2:]
            strval = part_name[:2]
            thr = threading.Thread(target=DBCreate_AddNewTables_Thread,
                    args=(self, self.rscr, nval, strval, nxt_part, part_name, trans_nxt_part, ))
            thr.start()
            self.Monitoraddt(thr) 
        else:
            self.addt.Disable()
            self.add.Enable()
            self.tbcb.SetValue(False)

    def Monitoraddt(self, thr):
        if thr.is_alive():
            ###self.tcount += 1
            self.addt.SetLabel(self.messdp) ## 'Working %s '%str(self.tcount))
            self.after(100, lambda:self.Monitoraddt(thr))
        else:
            self.addt.SetLabel('ADD DONE !')
            self.messdp = ''
            
    def ValueForPart(self):
        ##part_name = self.part  ## OLD METHOD
        part_name = ''.join([self.part[:2], str(sum([int(self.part[2:]),1]))])
        cd_val = self.current_date.GetValue().strip()
        cd_v = cd_val.split('-')
        cd_y = cd_v[0]
        cd_m = cd_v[1]
        cd_d = cd_v[2]
        nxpv = self.nxt_prt_date.GetValue().strip()
        npv = str(nxpv).split('-')
        n_ = npv[0]
        nyy = int(n_)+1
        nxt_part = str(nyy)+"-04-01"
        trans_nxt_part = int(str(part_name).split('y')[1])+1
        self.nxt_part, self.trans_nxt_part = nxt_part, trans_nxt_part
        return part_name, nxt_part, trans_nxt_part
    
    def GetInsertValuesForMycalendar(self, part_name, nxt_part, trans_nxt_part, nval):
        ###nval = '' ## Incremeted New Table Numbers '' == No increments
        frm = '-'.join([str(sum([int(nxt_part[0:4]),-1])),nxt_part[5:10]])
        tod = '-'.join([nxt_part[0:4], "%02d" % sum([int(nxt_part[5:7]),-1]),'31'])
        inslst = [(part_name, frm, tod, nval),]
        CREATEPARTITION(self.cnn, self.cursor, self.rscr['dbinfo']['tables']).POPULATE_MYCALENAR_TABLE(inslst)
        
    def Add_AC_Views(self):
        viewname = 'acview'
        CREATEPARTITION(self.cnn, self.cursor, self.rscr['dbinfo']['tables']
                        ).CREATE_AC_VIEWS(''.join([viewname, str(self.part[2:])]), str(self.part[2:]))
                
    def Onadd(self, event=None):
        part_name, nxt_part, trans_nxt_part = self.ValueForPart()
        dlg = RMSMBX(self, text="Do You Want to ADD New Finacial Year ? \n"
                "YES will Add New Finacial Year !!!",
            textclr='black', bg='white', info=False)
        if dlg.result: 
            self.add.Disable()
            self.addt.Disable()
            nval = part_name[2:]
            strval = part_name[:2]
            thr = threading.Thread(target=DBCreate_AddNewTables_Thread,
                    args=(self, self.rscr, nval, strval, nxt_part, part_name, trans_nxt_part, ))
            thr.start()
            self.Monitoradd(thr)
            
    def Monitoradd(self, thr):
        if thr.is_alive():
            ###self.tcount += 1
            self.add.SetLabel(self.messdp) ###'Working %s '%str(self.tcount))
            self.after(100, lambda:self.Monitoradd(thr))
        else:
            self.add.SetLabel('ADD DONE !')
            self.messdp = ''

            
    def Ondelete(self, event=None):
        gt_dt = self.delete_part_range.GetValue()
        get_date = self.delete_part_range.GetValue()
        name = self.delete_part_name.GetValue().strip()
        if gt_dt == '':
            RMSMBX(self, text="SELECT DATE RANGE FIRST \n THEN DELETE FINENCIAL YEAR !!",
               textclr='black', bg='yellow', info=True)
        else:
            if self.tabnumval.isdigit(): ### if having seperate tables; this will give numbers in string
                dlg = RMSMBX(self, text=""+self.delete_part_range.GetValue()+"\nContaining Seperate Tables\nYou Will Lost Data of Selected Year\n "
                             "Are You Sure ??",textclr='red', bg='white', info=False)
                if dlg.result:
                    tv = self.tabnumval ## Getting Value From Onlc function [compulsory]
                    tblst = ['ac_trans', 'cash', 'pay_rcpt', 'purchase', 'purchase_item', 'sales', 'sales_item', 'transaction']
                    tabnum = [ ''.join([t,tv]) for t in tblst]
                    if self.tabdelbool:
                        self.tabdelbool = False
                        try:
                            fldname = '_'.join(['DELETEDTABLES',tv])
                            ### Put these values in thread
                            self.delete.Disable()
                            self.addt.Disable()
                            self.add.Disable()
                            self.messdp = ''
                            self.deletemess = None
                            
                            ### partlist = [part_name, nxt_part, trans_nxt_part, '']
                            
                            thr = threading.Thread(target=FYThread,
                            args=(self, self.rscr, get_date, name, ))
                            thr.start()
                            
                            self.Monitordeletenum(thr)
                            ### FYThread class taking two class gclas, gclas2, dbdlist Takes details of DB connect, name is part name
                            ### tabnum is Incremented Table Number
                            ### fldname folderb name,  Deleted Table BackUp in This Folder on win_rmss/RMS_BACKUP/
                            ### partlist has 4 items in this FIXED ORDER [part_name, nxt_part, trans_nxt_part, '']
                            #self.lc.DeleteItem(self.tabdelindex)
                            
                        except Exception as err:
                            StatusDP(self.status, 'OHh ! Error Found [%s]'%str(err), fg='red')
                            return       
            else:
                dlg = RMSMBX(self, text=""+self.delete_part_range.GetValue()+"\nYou Will Lost All Work\n"
                             "Related to Selected\Finencial Year\nAre You Sure ??",textclr='red', bg='white', info=False)
                if dlg.result:    
                    StatusDP(self.status, 'Please Wait.... ', fg='red')
                    self.deletemess = None
                    thr = threading.Thread(target=DeletePart_Thread, args=(self, name, self.partclass,))
                    thr.start()
                    self.Monitordelete(thr)
                    
    def Monitordeletenum(self, thr):
        if thr.is_alive():
            ###self.tcount += 1
            self.delete.SetLabel(self.messdp)
            self.after(100, lambda:self.Monitordeletenum(thr))
        else:
            if self.deletemess:
                LcRefresh(self, self.lc, self.add , self.delete)
                mess = 'DELETE DONE !'
                StatusDP(self.status, 'Successfuly Deleted !! RESTART RMS ', fg='blue')
            else:
                mess = 'CAN NOT DELETE !'
                StatusDP(self.status, 'Cannot Delete, Some Error Found', fg='red')
            self.delete.SetLabel(mess)
            self.messdp = ''
                
    def Monitordelete(self, thr):
        if thr.is_alive():
            ###self.tcount += 1
            self.delete.SetLabel(self.messdp)###'Deleting %s '%str(self.tcount))
            self.after(100, lambda:self.Monitordelete(thr))
        else:
            if self.deletemess:
                LcRefresh(self, self.lc, self.add , self.delete)
                mess = 'DELETE DONE !'
                StatusDP(self.status, 'Successfuly Deleted !! RESTART RMS ', fg='blue')
            else:
                mess = 'CAN NOT DELETE !'
                StatusDP(self.status, 'Cannot Delete, Some Error Found', fg='red')
            self.delete.SetLabel(mess)
            self.messdp = ''
            
    def OnRefresh(self, event=None):
        LcRefresh(self, self.lc, self.add , self.delete)
"""      
def main():
    root = Tk()
    sw = root.winfo_screenwidth()
    sh = root.winfo_screenheight()
    #"Calibri Bold", "Calibri", "Arial", "Arial Bold", "Times New Roman", "Times New Roman Bold"
    sysfontnum = 12  ### Default is given Upate Later/User Given 
    entryfont = "Calibri Bold"
    subentryfont = "Calibri"
    fontd = {"calb":"Calibri Bold", "cal":"Calibri", "arl":"Arial", "arlb":"Arial Bold",
                 "tnr":"Times New Roman", "tnrb":"Times New Roman Bold", "entryfont":{'font': (entryfont, sysfontnum)},
                 "subentryfont":{'font': (subentryfont, sysfontnum)}}
    today = time.strftime('%d/%m/%Y', time.localtime(time.time()))
    today_db_f = time.strftime('%Y-%m-%d', time.localtime(time.time()))
    
    mycalendar = (('fy0', today_db_f, today_db_f, u''),)
    rmspath = os.path.dirname(os.path.realpath(__file__))
    pdir = os.path.dirname(rmspath)
    rmsicon = os.path.join(rmspath, 'my_icon.ico')
    ostd = {'pageline':60, 'net_colm':'Y','party_bal':'N','stockist_list':'Y',
                'page_size':'4','default_trade':0,'bill_series':'S'}
    own = {'name':'RMS SOFT','add1':'http://www.rmssoft.co.in','add2':'','phone':'','reg':'', 'gstin':'','statu1':'','statu2':'','statu3':'','statu4':''}
    otlst = {'others':'/True', 'stockist_det':''}
    opdfsett = {'vat':4, 'vat1':4, 'sat':1, 'cst':2}
    ownerdict = {'billseries':'S', 'demochk':45, 'ownerinfo':{'owner':own, 'othersett':ostd, 'otlst':otlst, 'opdfsett':opdfsett},
                 'errorlist':[]}
    prpath = {}
    printerinfo = {'printer':{'pport':'USB001','pname':'myprinter'},'shareprinter':{'sprinter':'myprinter','sport':'LPT1','sname':'tvs'}}
    taxinfo = {'taxinfo':{'tax1name':'CGST', 'tax2name':'SGST','tax1lst':[], 'tax2lst':[], 'taxpayer':True},}
    
    rscr = {'sw':sw, 'sh':sh, 'font':fontd,'sysfontnum':int(sysfontnum), 'ownerdict':ownerdict, 'mycalendar':mycalendar,
            'fyear':'0', 'daterange':['2000-01-01','2021-03-31'],
            'calendar':{'fy':'fy1','dbfrm':'2017-04-01','frm':'01/04/2017','tod':'30/03/2018','partnum':'1','dbtod':'2018-03-30'},
            'ledgerid':'0','itemid':'0','transid':'0','spid':'0','csid':'0','csname':'',
            'rmspath':rmspath,'rmsicon':rmsicon, 'pardir': rmspath, 'prpath':prpath,'taxinfo':taxinfo,'printerinfo': printerinfo,
            'TABLENUM':'','today':today, 'today_db_format':today_db_f,'tax1':'0', 'tax2':'0',
            'the_time':'', 'itemidlist':[], 'spidlist':[],'renderlist':[],
            'taxinvoice':True,'stkmess':'YES','decimalval':'2','last_esti_no':None, 'last_sale_bill_no':None,
            'exp_alert':90,'estifilter':False, }
    buttonidx = 1
    parent = None
    sptag = 'Finencial Calendar Range'
    spnum = 1
    whxy = (800, 400, 300, 100)
    app = FYCalendar(root, sptag, spnum, buttonidx, parent, whxy, rscr=rscr)    
    root.mainloop()

if __name__ == '__main__':
    main()
"""
